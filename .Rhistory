### input data
workdir <-"C:/Users/didovets/Documents/Projects/project_1/2024/scripts/obs_normals"
start_ref <-1991       # first reference year
end_ref <-2020         # last reference year
eval_year <-2023       # evaluation year
sel_percentile<-c(0.1,0.25, 0.75, 0.9)  # percentiles
# Ensure necessary packages are installed and loaded
required_packages <- c("dplyr", "lubridate")
# Install and load the required packages
sapply(required_packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
setwd(workdir)
input_files<- list.files("input")
tab_all_stations<-data.frame()
# Ensure necessary packages are installed and loaded
required_packages <- c("dplyr", "lubridate")
# Install and load the required packages
sapply(required_packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
setwd(workdir)
input_files<- list.files("input")
tab_all_stations<-data.frame()
for (input_file in input_files){
print(paste("Process file: ", input_file))
input_data<-read.table(paste("input/",input_file, sep = ""), sep = ",", header = T)  # read data
colnames(input_data)<-c("date", "discharge") # rename columns
input_data$date <- parse_date_time(input_data$date, orders = c("ymd", "dmy", "mdy"),
truncated = 3,
tz = "UTC")   #convert column to date format
# create a year columns and check the discharge data for NA
data<-input_data %>% mutate(year= year(date)) %>%
mutate(discharge = as.numeric(as.character(discharge)),
discharge = ifelse(is.na(discharge) & !is.na(as.character(discharge)), NA, discharge))
# subtract periods
reference_sel<-data %>% dplyr::filter(year >= start_ref & year <= end_ref)   # select the reference period
# check the number of years
check_years <- function(data, year_col) {
num_years <- data %>%
filter(!is.na(discharge)) %>%
summarise(n_years = n_distinct(!!sym(year_col))) %>%
pull(n_years)
if (num_years < 20) {
stop("Warning: The number of unique years in the reference period is ", num_years," (<20).")
} else {
message("The number of unique years is ", num_years, " (>20). Good!")
}
return(num_years)
}
num_years <- check_years(reference_sel, "year")
# check number of observations in evaluation year
target_year_sel<-data %>% dplyr::filter(year == eval_year)         # select evaluation year
check_eval_year <- function(df) {
num_observations <- df %>%
filter(!is.na(discharge)) %>%
summarise(n_obs = n()) %>%
pull(n_obs)
# Check if the number of observations is less than 345
if (num_observations < 345) {
stop("Error: The number of observations in 2023 is ",num_observations,    "(<345).")
} else {
message("The number of observations in 2023 is ", num_observations, " (>345). Good!")
}
return(invisible(num_observations))
}
check_eval_year(target_year_sel)
# calculate percentile for the reference period
reference<-reference_sel %>%   group_by(year) %>%
dplyr::summarize(mean=mean(discharge, na.rm=T)) %>%                         # convert to annual mean
reframe(percentile = scales::percent(sel_percentile),
values = round(quantile(mean, sel_percentile, na.rm = T),2))      # calculate percentile
# calculate the annual mean
target_year<- target_year_sel %>%
summarise(Q_year=mean(discharge, na.rm=T)) %>% round(2) %>%             # convert to annual mean
mutate(state=case_when(
Q_year >= reference$values[2] & Q_year <= reference$values[3] ~ 'normal',
Q_year < reference$values[1] ~ 'much below',
Q_year >= reference$values[1] & Q_year < reference$values[2] ~ 'below',
Q_year > reference$values[3] & Q_year < reference$values[4] ~ 'above',
Q_year >= reference$values[4] ~ 'much above'
))                                                                      # classify normal
# select variable and arrange into one table
result<-t(reference)
colnames(result) <- as.character(unlist(result[1, ]))
results_out<- result %>% as.data.frame() %>%  slice(-1) %>%
cbind(target_year) %>%
mutate(filename=input_file) %>%
select(filename, state, everything())
tab_all_stations<-rbind(tab_all_stations, results_out)
write.csv(tab_all_stations, paste("output/normals.csv", sep=''), row.names = FALSE, quote = F)
}
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
plot(reference_sel)
View(data)
View(reference)
View(result)
View(target_year)
View(target_year_sel)
View(tab_all_stations)
View(result)
View(input_data)
plot(input_data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
### input data
workdir <-"C:/Users/didovets/Documents/Projects/project_1/2024/scripts/obs_normals"
start_ref <-1991       # first reference year
end_ref <-2020         # last reference year
eval_year <-2023       # evaluation year
sel_percentile<-c(0.1,0.25, 0.75, 0.9)  # percentiles
# Ensure necessary packages are installed and loaded
required_packages <- c("dplyr", "lubridate")
# Install and load the required packages
sapply(required_packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
setwd(workdir)
input_files<- list.files("input")
tab_all_stations<-data.frame()
for (input_file in input_files){
print(paste("Process file: ", input_file))
input_data<-read.table(paste("input/",input_file, sep = ""), sep = ",", header = T)  # read data
colnames(input_data)<-c("date", "discharge") # rename columns
input_data$date <- parse_date_time(input_data$date, orders = c("ymd", "dmy", "mdy"),
truncated = 3,
tz = "UTC")   #convert column to date format
# create a year columns and check the discharge data for NA
data<-input_data %>% mutate(year= year(date)) %>%
mutate(discharge = as.numeric(as.character(discharge)),
discharge = ifelse(is.na(discharge) & !is.na(as.character(discharge)), NA, discharge))
# subtract periods
reference_sel<-data %>% dplyr::filter(year >= start_ref & year <= end_ref)   # select the reference period
# check the number of years
check_years <- function(data, year_col) {
num_years <- data %>%
filter(!is.na(discharge)) %>%
summarise(n_years = n_distinct(!!sym(year_col))) %>%
pull(n_years)
if (num_years < 20) {
stop("Warning: The number of unique years in the reference period is ", num_years," (<20).")
} else {
message("The number of unique years is ", num_years, " (>20). Good!")
}
return(num_years)
}
num_years <- check_years(reference_sel, "year")
# check number of observations in evaluation year
target_year_sel<-data %>% dplyr::filter(year == eval_year)         # select evaluation year
check_eval_year <- function(df) {
num_observations <- df %>%
filter(!is.na(discharge)) %>%
summarise(n_obs = n()) %>%
pull(n_obs)
# Check if the number of observations is less than 345
if (num_observations < 345) {
stop("Error: The number of observations in 2023 is ",num_observations,    "(<345).")
} else {
message("The number of observations in 2023 is ", num_observations, " (>345). Good!")
}
return(invisible(num_observations))
}
check_eval_year(target_year_sel)
# calculate percentile for the reference period
reference<-reference_sel %>%   group_by(year) %>%
dplyr::summarize(mean=mean(discharge, na.rm=T)) %>%                         # convert to annual mean
reframe(percentile = scales::percent(sel_percentile),
values = round(quantile(mean, sel_percentile, na.rm = T),2))      # calculate percentile
# calculate the annual mean
target_year<- target_year_sel %>%
summarise(Q_year=mean(discharge, na.rm=T)) %>% round(2) %>%             # convert to annual mean
mutate(state=case_when(
Q_year >= reference$values[2] & Q_year <= reference$values[3] ~ 'normal',
Q_year < reference$values[1] ~ 'much below',
Q_year >= reference$values[1] & Q_year < reference$values[2] ~ 'below',
Q_year > reference$values[3] & Q_year < reference$values[4] ~ 'above',
Q_year >= reference$values[4] ~ 'much above'
))                                                                      # classify normal
# select variable and arrange into one table
result<-t(reference)
colnames(result) <- as.character(unlist(result[1, ]))
results_out<- result %>% as.data.frame() %>%  slice(-1) %>%
cbind(target_year) %>%
mutate(filename=input_file) %>%
select(filename, state, everything())
tab_all_stations<-rbind(tab_all_stations, results_out)
plot(input_data)
write.csv(tab_all_stations, paste("output/normals.csv", sep=''), row.names = FALSE, quote = F)
}
print(paste("Process file: ", input_file))
input_data<-read.table(paste("input/",input_file, sep = ""), sep = ",", header = T)  # read data
colnames(input_data)<-c("date", "discharge") # rename columns
input_data$date <- parse_date_time(input_data$date, orders = c("ymd", "dmy", "mdy"),
truncated = 3,
tz = "UTC")   #convert column to date format
View(input_data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
View(input_data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
View(input_data)
colnames(input_data)<-c("date", "discharge") # rename columns
View(data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
View(input_data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
View(data)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
source("~/Projects/project_1/2023/work/scripts/simulated_streamflow/calculate_normal_ghms.R", echo=TRUE)
source("~/Projects/project_1/2024/scripts/obs_normals/normals_calculation.R", echo=TRUE)
